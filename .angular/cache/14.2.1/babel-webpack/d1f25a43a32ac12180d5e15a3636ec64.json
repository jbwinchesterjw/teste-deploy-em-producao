{"ast":null,"code":"import { environment } from './../../environments/environment';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@auth0/angular-jwt\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, jwtHelper) {\n      this.http = http;\n      this.jwtHelper = jwtHelper;\n      this.tokensRevokeUrl = environment.apiUrl + '/tokens/revoke';\n      this.oauthTokenUrl = environment.apiUrl + '/oauth/token';\n      this.carregarToken();\n    }\n\n    login(usuario, senha) {\n      const headers = new HttpHeaders().append('Content-Type', 'application/x-www-form-urlencoded').append('Authorization', 'Basic YW5ndWxhcjpAbmd1bEByMA==');\n      const body = `username=${usuario}&password=${senha}&grant_type=password`;\n      return this.http.post(this.oauthTokenUrl, body, {\n        headers,\n        withCredentials: true\n      }).toPromise().then(response => {\n        this.armazenarToken(response['access_token']);\n      }).catch(response => {\n        if (response.status === 400) {\n          if (response.error.error === 'invalid_grant') {\n            return Promise.reject('Usuário ou senha inválida!');\n          }\n        }\n\n        return Promise.reject(response);\n      });\n    }\n\n    obterNovoAccessToken() {\n      const headers = new HttpHeaders().append('Content-Type', 'application/x-www-form-urlencoded').append('Authorization', 'Basic YW5ndWxhcjpAbmd1bEByMA==');\n      const body = 'grant_type=refresh_token';\n      return this.http.post(this.oauthTokenUrl, body, {\n        headers,\n        withCredentials: true\n      }).toPromise().then(response => {\n        this.armazenarToken(response['access_token']);\n        console.log('Novo access token criado!');\n        return Promise.resolve();\n      }).catch(response => {\n        console.error('Erro ao renovar token.', response);\n        return Promise.resolve();\n      });\n    }\n\n    isAccessTokenInvalido() {\n      const token = localStorage.getItem('token');\n      return !token || this.jwtHelper.isTokenExpired(token);\n    }\n\n    temPermissao(permissao) {\n      return this.jwtPayload && this.jwtPayload.authorities.includes(permissao);\n    }\n\n    temQualquerPermissao(roles) {\n      for (const role of roles) {\n        if (this.temPermissao(role)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    armazenarToken(token) {\n      this.jwtPayload = this.jwtHelper.decodeToken(token);\n      localStorage.setItem('token', token);\n    }\n\n    carregarToken() {\n      const token = localStorage.getItem('token');\n\n      if (token) {\n        this.armazenarToken(token);\n      }\n    }\n\n    limparAccessToken() {\n      localStorage.removeItem('token');\n      this.jwtPayload = null;\n    }\n\n    logout() {\n      return this.http.delete(this.tokensRevokeUrl, {\n        withCredentials: true\n      }).toPromise().then(() => {\n        this.limparAccessToken();\n      });\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtHelperService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}